Token type : def of value def
Token type : int of value int
Token type : id of value add
Token type : ( of value (
Token type : id of value a
Token type : , of value ,
Token type : id of value b
Token type : ) of value )
Token type : { of value {
Token type : # of value #
Token type : id of value adds
Token type : id of value two
Token type : id of value numbers
Token type : id of value together
Token type : lnend of value \n
Token type : return of value return
Token type : id of value a
Token type : + of value +
Token type : id of value b
Token type : lnend of value \n
Token type : } of value }
Token type : lnend of value \n
Token type : lnend of value \n
Token type : / of value /
Token type : / of value /
Token type : id of value divides
Token type : id of value two
Token type : id of value numbers
Token type : lnend of value \n
Token type : def of value def
Token type : float of value float
Token type : id of value divide
Token type : ( of value (
Token type : float of value float
Token type : id of value a
Token type : , of value ,
Token type : id of value b
Token type : ) of value )
Token type : { of value {
Token type : lnend of value \n
Token type : return of value return
Token type : id of value a
Token type : / of value /
Token type : id of value b
Token type : lnend of value \n
Token type : } of value }
Token type : lnend of value \n
Token type : lnend of value \n
Token type : id of value a
Token type : = of value =
Token type : float of value 1.5
Token type : lnend of value \n
Token type : id of value a
Token type : ++ of value ++
Token type : lnend of value \n
Token type : int of value int
Token type : id of value b
Token type : = of value =
Token type : int of value 3
Token type : lnend of value \n
Token type : id of value string
Token type : id of value c
Token type : = of value =
Token type : " of value "
Token type : id of value hello
Token type : id of value world
Token type : " of value "
Token type : lnend of value \n
Token type : lnend of value \n
Token type : id of value print
Token type : ( of value (
Token type : id of value add
Token type : ( of value (
Token type : id of value a
Token type : , of value ,
Token type : id of value b
Token type : ) of value )
Token type : ) of value )
Token type : lnend of value \n
Token type : id of value print
Token type : ( of value (
Token type : id of value divide
Token type : ( of value (
Token type : id of value a
Token type : , of value ,
Token type : id of value b
Token type : ) of value )
Token type : ) of value )
Token type : lnend of value \n
Token type : lnend of value \n
Token type : if of value if
Token type : id of value a
Token type : >= of value >=
Token type : id of value b
Token type : { of value {
Token type : lnend of value \n
Token type : id of value print
Token type : ( of value (
Token type : " of value "
Token type : id of value a
Token type : id of value is
Token type : id of value larger
Token type : " of value "
Token type : ) of value )
Token type : lnend of value \n
Token type : } of value }
Token type : EOF of value EOF
