
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVrightUMINUSADD ASSIGN BOOL BOOLattr BREAK CLASS COMMA CONST CONTINUE DEF DIV ELSE EQUALS EXP FLOAT FLOATattr FOR GEQUAL GREATER ID IF IMPORT INTattr LBRACE LBRACKET LEQUAL LESS LNEND LPAREN MINUS MULT NULL NUMBER PLUS RBRACE RBRACKET RETURN RPAREN STRING STRINGattr SUB WHILE\n        program : statement_list\n        \n        statement_list : statement\n                    | statement_list statement\n        \n        statement : assignment\n                | function_declaration\n                | return_statement\n                | function_call\n                | if_statement\n                | for_statement\n        \n        function_call : ID LPAREN RPAREN\n                      | ID LPAREN parameters RPAREN\n        \n        if_statement : IF expression LBRACE statement_body RBRACE\n                    | IF expression LBRACE statement_body RBRACE ELSE LBRACE statement_body RBRACE\n        \n        for_statement : FOR expression LBRACE statement_body RBRACE\n        \n        assignment : ID ASSIGN expression\n                   | FLOATattr ID ASSIGN expression\n                   | STRINGattr ID ASSIGN expression\n                   | INTattr ID ASSIGN expression\n                   | BOOLattr ID ASSIGN expression\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULT expression\n                   | expression DIV expression\n                   | expression EXP expression\n                   | expression EQUALS expression\n                   | NUMBER\n                   | STRING\n                   | FLOAT\n                   | ID\n                   | function_call\n        expression : MINUS expression %prec UMINUS\n        return_statement : RETURN expression\n        \n        return_type : INTattr\n                    | FLOATattr\n                    | STRINGattr\n                    | BOOLattr\n                    | NULL\n        \n        function_declaration : DEF ID LPAREN RPAREN LBRACE statement_body RBRACE\n                            | DEF ID LPAREN parameters RPAREN LBRACE statement_body RBRACE\n                            | DEF return_type ID LPAREN RPAREN LBRACE statement_body RBRACE\n                            | DEF return_type ID LPAREN parameters RPAREN LBRACE statement_body RBRACE\n        \n        statement_body : statement_list\n                    | return_statement\n        \n        parameters : ID\n                   | ID COMMA parameters\n        '
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,16,17,18,19,20,21,27,28,29,30,31,32,33,34,35,36,37,38,39,42,44,46,47,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,69,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[10,10,-2,-4,-5,-6,-7,-8,-9,22,23,24,25,26,38,38,38,-3,38,43,51,-33,-34,-35,-36,-37,-32,38,-26,-27,-28,-29,-30,-15,-10,38,38,38,38,43,38,38,38,38,38,38,-31,10,10,43,-11,-16,-17,-18,-19,43,-20,-21,-22,-23,-24,-25,10,-6,10,-12,-14,10,10,-38,10,10,-39,-40,-41,-13,]),'FLOATattr':([0,2,3,4,5,6,7,8,9,15,19,33,35,36,37,38,39,42,44,58,59,60,62,63,64,65,66,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[11,11,-2,-4,-5,-6,-7,-8,-9,29,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,11,11,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,11,-6,11,-12,-14,11,11,-38,11,11,-39,-40,-41,-13,]),'STRINGattr':([0,2,3,4,5,6,7,8,9,15,19,33,35,36,37,38,39,42,44,58,59,60,62,63,64,65,66,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[12,12,-2,-4,-5,-6,-7,-8,-9,30,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,12,12,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,12,-6,12,-12,-14,12,12,-38,12,12,-39,-40,-41,-13,]),'INTattr':([0,2,3,4,5,6,7,8,9,15,19,33,35,36,37,38,39,42,44,58,59,60,62,63,64,65,66,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[13,13,-2,-4,-5,-6,-7,-8,-9,28,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,13,13,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,13,-6,13,-12,-14,13,13,-38,13,13,-39,-40,-41,-13,]),'BOOLattr':([0,2,3,4,5,6,7,8,9,15,19,33,35,36,37,38,39,42,44,58,59,60,62,63,64,65,66,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[14,14,-2,-4,-5,-6,-7,-8,-9,31,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,14,14,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,14,-6,14,-12,-14,14,14,-38,14,14,-39,-40,-41,-13,]),'DEF':([0,2,3,4,5,6,7,8,9,19,33,35,36,37,38,39,42,44,58,59,60,62,63,64,65,66,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[15,15,-2,-4,-5,-6,-7,-8,-9,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,15,15,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,15,-6,15,-12,-14,15,15,-38,15,15,-39,-40,-41,-13,]),'RETURN':([0,2,3,4,5,6,7,8,9,19,33,35,36,37,38,39,42,44,58,59,60,62,63,64,65,66,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[16,16,-2,-4,-5,-6,-7,-8,-9,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,16,16,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,16,-6,16,-12,-14,16,16,-38,16,16,-39,-40,-41,-13,]),'IF':([0,2,3,4,5,6,7,8,9,19,33,35,36,37,38,39,42,44,58,59,60,62,63,64,65,66,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[17,17,-2,-4,-5,-6,-7,-8,-9,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,17,17,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,17,-6,17,-12,-14,17,17,-38,17,17,-39,-40,-41,-13,]),'FOR':([0,2,3,4,5,6,7,8,9,19,33,35,36,37,38,39,42,44,58,59,60,62,63,64,65,66,70,71,72,73,74,75,77,78,81,85,86,88,89,92,95,96,97,98,101,102,],[18,18,-2,-4,-5,-6,-7,-8,-9,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,18,18,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,18,-6,18,-12,-14,18,18,-38,18,18,-39,-40,-41,-13,]),'$end':([1,2,3,4,5,6,7,8,9,19,33,35,36,37,38,39,42,44,58,62,63,64,65,66,70,71,72,73,74,75,85,86,92,97,98,101,102,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-12,-14,-38,-39,-40,-41,-13,]),'RBRACE':([3,4,5,6,7,8,9,19,33,35,36,37,38,39,42,44,58,62,63,64,65,66,70,71,72,73,74,75,76,77,78,79,85,86,87,92,93,94,97,98,99,100,101,102,],[-2,-4,-5,-6,-7,-8,-9,-3,-32,-26,-27,-28,-29,-30,-15,-10,-31,-11,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,85,-42,-6,86,-12,-14,92,-38,97,98,-39,-40,101,102,-41,-13,]),'ASSIGN':([10,22,23,24,25,],[20,46,47,48,49,]),'LPAREN':([10,26,38,51,],[21,50,21,69,]),'NULL':([15,],[32,]),'NUMBER':([16,17,18,20,34,46,47,48,49,52,53,54,55,56,57,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'STRING':([16,17,18,20,34,46,47,48,49,52,53,54,55,56,57,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'FLOAT':([16,17,18,20,34,46,47,48,49,52,53,54,55,56,57,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'MINUS':([16,17,18,20,33,34,35,36,37,38,39,40,41,42,44,46,47,48,49,52,53,54,55,56,57,58,62,63,64,65,66,70,71,72,73,74,75,],[34,34,34,34,53,34,-26,-27,-28,-29,-30,53,53,53,-10,34,34,34,34,34,34,34,34,34,34,-31,-11,53,53,53,53,-20,-21,-22,-23,53,53,]),'RPAREN':([21,43,45,50,68,69,80,84,],[44,-44,62,67,82,83,-45,90,]),'PLUS':([33,35,36,37,38,39,40,41,42,44,58,62,63,64,65,66,70,71,72,73,74,75,],[52,-26,-27,-28,-29,-30,52,52,52,-10,-31,-11,52,52,52,52,-20,-21,-22,-23,52,52,]),'MULT':([33,35,36,37,38,39,40,41,42,44,58,62,63,64,65,66,70,71,72,73,74,75,],[54,-26,-27,-28,-29,-30,54,54,54,-10,-31,-11,54,54,54,54,54,54,-22,-23,54,54,]),'DIV':([33,35,36,37,38,39,40,41,42,44,58,62,63,64,65,66,70,71,72,73,74,75,],[55,-26,-27,-28,-29,-30,55,55,55,-10,-31,-11,55,55,55,55,55,55,-22,-23,55,55,]),'EXP':([33,35,36,37,38,39,40,41,42,44,58,62,63,64,65,66,70,71,72,73,74,75,],[56,-26,-27,-28,-29,-30,56,56,56,-10,-31,-11,56,56,56,56,-20,-21,-22,-23,56,56,]),'EQUALS':([33,35,36,37,38,39,40,41,42,44,58,62,63,64,65,66,70,71,72,73,74,75,],[57,-26,-27,-28,-29,-30,57,57,57,-10,-31,-11,57,57,57,57,-20,-21,-22,-23,57,57,]),'LBRACE':([35,36,37,38,39,40,41,44,58,62,67,70,71,72,73,74,75,82,83,90,91,],[-26,-27,-28,-29,-30,59,60,-10,-31,-11,81,-20,-21,-22,-23,-24,-25,88,89,95,96,]),'COMMA':([43,],[61,]),'ELSE':([85,],[91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,59,60,81,88,89,95,96,],[2,77,77,77,77,77,77,77,]),'statement':([0,2,59,60,77,81,88,89,95,96,],[3,19,3,3,19,3,3,3,3,3,]),'assignment':([0,2,59,60,77,81,88,89,95,96,],[4,4,4,4,4,4,4,4,4,4,]),'function_declaration':([0,2,59,60,77,81,88,89,95,96,],[5,5,5,5,5,5,5,5,5,5,]),'return_statement':([0,2,59,60,77,81,88,89,95,96,],[6,6,78,78,6,78,78,78,78,78,]),'function_call':([0,2,16,17,18,20,34,46,47,48,49,52,53,54,55,56,57,59,60,77,81,88,89,95,96,],[7,7,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,7,7,7,7,7,7,7,7,]),'if_statement':([0,2,59,60,77,81,88,89,95,96,],[8,8,8,8,8,8,8,8,8,8,]),'for_statement':([0,2,59,60,77,81,88,89,95,96,],[9,9,9,9,9,9,9,9,9,9,]),'return_type':([15,],[27,]),'expression':([16,17,18,20,34,46,47,48,49,52,53,54,55,56,57,],[33,40,41,42,58,63,64,65,66,70,71,72,73,74,75,]),'parameters':([21,50,61,69,],[45,68,80,84,]),'statement_body':([59,60,81,88,89,95,96,],[76,79,87,93,94,99,100,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','TallyParser.py',15),
  ('statement_list -> statement','statement_list',1,'p_statement_list','TallyParser.py',21),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','TallyParser.py',22),
  ('statement -> assignment','statement',1,'p_statement','TallyParser.py',31),
  ('statement -> function_declaration','statement',1,'p_statement','TallyParser.py',32),
  ('statement -> return_statement','statement',1,'p_statement','TallyParser.py',33),
  ('statement -> function_call','statement',1,'p_statement','TallyParser.py',34),
  ('statement -> if_statement','statement',1,'p_statement','TallyParser.py',35),
  ('statement -> for_statement','statement',1,'p_statement','TallyParser.py',36),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','TallyParser.py',42),
  ('function_call -> ID LPAREN parameters RPAREN','function_call',4,'p_function_call','TallyParser.py',43),
  ('if_statement -> IF expression LBRACE statement_body RBRACE','if_statement',5,'p_if_statement','TallyParser.py',52),
  ('if_statement -> IF expression LBRACE statement_body RBRACE ELSE LBRACE statement_body RBRACE','if_statement',9,'p_if_statement','TallyParser.py',53),
  ('for_statement -> FOR expression LBRACE statement_body RBRACE','for_statement',5,'p_for_statement','TallyParser.py',62),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','TallyParser.py',68),
  ('assignment -> FLOATattr ID ASSIGN expression','assignment',4,'p_assignment','TallyParser.py',69),
  ('assignment -> STRINGattr ID ASSIGN expression','assignment',4,'p_assignment','TallyParser.py',70),
  ('assignment -> INTattr ID ASSIGN expression','assignment',4,'p_assignment','TallyParser.py',71),
  ('assignment -> BOOLattr ID ASSIGN expression','assignment',4,'p_assignment','TallyParser.py',72),
  ('expression -> expression PLUS expression','expression',3,'p_expression','TallyParser.py',81),
  ('expression -> expression MINUS expression','expression',3,'p_expression','TallyParser.py',82),
  ('expression -> expression MULT expression','expression',3,'p_expression','TallyParser.py',83),
  ('expression -> expression DIV expression','expression',3,'p_expression','TallyParser.py',84),
  ('expression -> expression EXP expression','expression',3,'p_expression','TallyParser.py',85),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','TallyParser.py',86),
  ('expression -> NUMBER','expression',1,'p_expression','TallyParser.py',87),
  ('expression -> STRING','expression',1,'p_expression','TallyParser.py',88),
  ('expression -> FLOAT','expression',1,'p_expression','TallyParser.py',89),
  ('expression -> ID','expression',1,'p_expression','TallyParser.py',90),
  ('expression -> function_call','expression',1,'p_expression','TallyParser.py',91),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','TallyParser.py',99),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','TallyParser.py',104),
  ('return_type -> INTattr','return_type',1,'p_return_type','TallyParser.py',110),
  ('return_type -> FLOATattr','return_type',1,'p_return_type','TallyParser.py',111),
  ('return_type -> STRINGattr','return_type',1,'p_return_type','TallyParser.py',112),
  ('return_type -> BOOLattr','return_type',1,'p_return_type','TallyParser.py',113),
  ('return_type -> NULL','return_type',1,'p_return_type','TallyParser.py',114),
  ('function_declaration -> DEF ID LPAREN RPAREN LBRACE statement_body RBRACE','function_declaration',7,'p_function_declaration','TallyParser.py',120),
  ('function_declaration -> DEF ID LPAREN parameters RPAREN LBRACE statement_body RBRACE','function_declaration',8,'p_function_declaration','TallyParser.py',121),
  ('function_declaration -> DEF return_type ID LPAREN RPAREN LBRACE statement_body RBRACE','function_declaration',8,'p_function_declaration','TallyParser.py',122),
  ('function_declaration -> DEF return_type ID LPAREN parameters RPAREN LBRACE statement_body RBRACE','function_declaration',9,'p_function_declaration','TallyParser.py',123),
  ('statement_body -> statement_list','statement_body',1,'p_statement_body','TallyParser.py',137),
  ('statement_body -> return_statement','statement_body',1,'p_statement_body','TallyParser.py',138),
  ('parameters -> ID','parameters',1,'p_parameters','TallyParser.py',147),
  ('parameters -> ID COMMA parameters','parameters',3,'p_parameters','TallyParser.py',148),
]
