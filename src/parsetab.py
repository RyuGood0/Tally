
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftMULTDIVrightUMINUSADD ASSIGN BOOL BOOLattr BREAK CLASS COMMA CONST CONTINUE DEF DIV ELSE EQUALS EXP FLOAT FLOATattr FOR GEQUAL GREATER ID IF IMPORT IN INTattr LBRACE LBRACKET LEQUAL LESS LNEND LPAREN MINUS MINUSEQUAL MULT NEQUAL NULL NUMBER PLUS PLUSEQUAL RBRACE RBRACKET RETURN RPAREN STRING STRINGattr SUB WHILE\n        program : statement_list\n        \n        statement_list : statement\n                       | statement_list statement\n        \n        statement : assignment\n                | assignment_update\n                | function_declaration\n                | return_statement\n                | function_call\n                | if_statement\n                | for_in_statement\n        \n        function_call : ID LPAREN RPAREN\n                      | ID LPAREN parameters RPAREN\n        \n        array_declaration : LBRACKET array_elements RBRACKET\n        \n        array_elements : expression\n                       | expression COMMA array_elements\n        \n        if_statement : IF expression LBRACE statement_body RBRACE\n                    | IF expression LBRACE statement_body RBRACE ELSE LBRACE statement_body RBRACE\n        \n        for_in_statement : FOR id_list IN ID LBRACE statement_body RBRACE\n        \n        id_list : ID\n                | ID COMMA id_list\n        \n        assignment : ID ASSIGN expression\n                   | type_attr ID ASSIGN expression\n                   | CONST ID ASSIGN expression\n                   | CONST type_attr ID ASSIGN expression\n        \n        assignment_type : ASSIGN\n                  | PLUSEQUAL\n                  | MINUSEQUAL\n        \n        assignment_update : ID assignment_type expression\n                          | ID ADD\n                          | ID SUB\n        \n        expression : expression PLUS expression\n                   | expression MINUS expression\n                   | expression MULT expression\n                   | expression DIV expression\n                   | expression EXP expression\n                   | expression EQUALS expression\n                   | expression GREATER expression\n                   | expression LESS expression\n                   | expression GEQUAL expression\n                   | expression LEQUAL expression\n                   | expression NEQUAL expression\n                   | LPAREN expression RPAREN\n                   | NUMBER\n                   | STRING\n                   | FLOAT\n                   | BOOL\n                   | NULL\n                   | ID\n                   | function_call\n                   | array_declaration\n        expression : MINUS expression %prec UMINUS\n        return_statement : RETURN expression\n        \n        type_attr : INTattr\n                    | FLOATattr\n                    | STRINGattr\n                    | BOOLattr\n                    | NULL\n        \n        function_declaration : DEF ID LPAREN RPAREN LBRACE statement_body RBRACE\n                            | DEF ID LPAREN func_parameters RPAREN LBRACE statement_body RBRACE\n                            | DEF type_attr ID LPAREN RPAREN LBRACE statement_body RBRACE\n                            | DEF type_attr ID LPAREN func_parameters RPAREN LBRACE statement_body RBRACE\n        \n        statement_body : statement_list\n                       | return_statement\n        \n        value : NUMBER\n              | STRING\n              | FLOAT\n              | ID\n              | function_call\n              | NULL\n              | BOOL\n        \n        parameters : ID\n                   | ID COMMA parameters\n                   | value\n                   | value COMMA parameters\n        \n        func_parameters : ID\n                   | ID COMMA func_parameters\n                   | type_attr ID\n                   | type_attr ID COMMA func_parameters\n        '
    
_lr_action_items = {'ID':([0,2,3,4,5,6,7,8,9,10,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,33,35,36,37,38,39,40,41,42,43,44,45,46,47,51,52,54,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,83,84,85,86,87,88,89,90,91,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,118,119,120,126,127,130,131,132,136,140,141,142,143,144,147,148,],[11,11,-2,-4,-5,-6,-7,-8,-9,-10,31,32,34,44,44,50,-53,-54,-55,-56,-57,-3,44,44,-29,-30,53,-26,-27,65,67,-52,44,44,-43,-44,-45,-46,-47,-48,-49,-50,44,-21,-28,-11,44,44,92,44,44,44,44,44,44,44,44,44,44,44,-51,11,114,50,53,-12,53,-22,-23,44,122,92,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,44,11,-7,-24,92,11,-16,11,11,92,11,-58,11,11,-18,-59,-60,-61,-17,]),'CONST':([0,2,3,4,5,6,7,8,9,10,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,79,83,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,120,126,127,130,132,136,140,141,142,143,144,147,148,],[13,13,-2,-4,-5,-6,-7,-8,-9,-10,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,-51,13,-12,-22,-23,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,13,-7,-24,13,-16,13,13,13,-58,13,13,-18,-59,-60,-61,-17,]),'DEF':([0,2,3,4,5,6,7,8,9,10,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,79,83,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,120,126,127,130,132,136,140,141,142,143,144,147,148,],[14,14,-2,-4,-5,-6,-7,-8,-9,-10,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,-51,14,-12,-22,-23,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,14,-7,-24,14,-16,14,14,14,-58,14,14,-18,-59,-60,-61,-17,]),'RETURN':([0,2,3,4,5,6,7,8,9,10,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,79,83,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,120,126,127,130,132,136,140,141,142,143,144,147,148,],[15,15,-2,-4,-5,-6,-7,-8,-9,-10,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,-51,15,-12,-22,-23,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,15,-7,-24,15,-16,15,15,15,-58,15,15,-18,-59,-60,-61,-17,]),'IF':([0,2,3,4,5,6,7,8,9,10,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,79,83,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,120,126,127,130,132,136,140,141,142,143,144,147,148,],[16,16,-2,-4,-5,-6,-7,-8,-9,-10,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,-51,16,-12,-22,-23,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,16,-7,-24,16,-16,16,16,16,-58,16,16,-18,-59,-60,-61,-17,]),'FOR':([0,2,3,4,5,6,7,8,9,10,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,79,83,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,120,126,127,130,132,136,140,141,142,143,144,147,148,],[17,17,-2,-4,-5,-6,-7,-8,-9,-10,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,-51,17,-12,-22,-23,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,17,-7,-24,17,-16,17,17,17,-58,17,17,-18,-59,-60,-61,-17,]),'INTattr':([0,2,3,4,5,6,7,8,9,10,13,14,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,66,79,83,87,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,119,120,126,127,130,131,132,136,140,141,142,143,144,147,148,],[18,18,-2,-4,-5,-6,-7,-8,-9,-10,18,18,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,18,-51,18,-12,-22,-23,18,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,18,-7,-24,18,18,-16,18,18,18,18,-58,18,18,-18,-59,-60,-61,-17,]),'FLOATattr':([0,2,3,4,5,6,7,8,9,10,13,14,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,66,79,83,87,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,119,120,126,127,130,131,132,136,140,141,142,143,144,147,148,],[19,19,-2,-4,-5,-6,-7,-8,-9,-10,19,19,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,19,-51,19,-12,-22,-23,19,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,19,-7,-24,19,19,-16,19,19,19,19,-58,19,19,-18,-59,-60,-61,-17,]),'STRINGattr':([0,2,3,4,5,6,7,8,9,10,13,14,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,66,79,83,87,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,119,120,126,127,130,131,132,136,140,141,142,143,144,147,148,],[20,20,-2,-4,-5,-6,-7,-8,-9,-10,20,20,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,20,-51,20,-12,-22,-23,20,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,20,-7,-24,20,20,-16,20,20,20,20,-58,20,20,-18,-59,-60,-61,-17,]),'BOOLattr':([0,2,3,4,5,6,7,8,9,10,13,14,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,66,79,83,87,89,90,96,97,98,99,100,101,102,103,104,105,106,107,108,109,112,113,118,119,120,126,127,130,131,132,136,140,141,142,143,144,147,148,],[21,21,-2,-4,-5,-6,-7,-8,-9,-10,21,21,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,21,-51,21,-12,-22,-23,21,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,21,-7,-24,21,21,-16,21,21,21,21,-58,21,21,-18,-59,-60,-61,-17,]),'NULL':([0,2,3,4,5,6,7,8,9,10,13,14,15,16,23,24,25,26,27,28,29,30,36,37,38,39,40,41,42,43,44,45,46,47,51,52,54,63,64,66,68,69,70,71,72,73,74,75,76,77,78,79,83,86,87,88,89,90,91,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,112,113,118,119,120,126,127,130,131,132,136,140,141,142,143,144,147,148,],[22,22,-2,-4,-5,-6,-7,-8,-9,-10,22,22,43,43,-3,43,43,-29,-30,61,-26,-27,-52,43,43,-43,-44,-45,-46,-47,-48,-49,-50,43,-21,-28,-11,43,43,22,43,43,43,43,43,43,43,43,43,43,43,-51,22,61,-12,61,-22,-23,43,22,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,43,22,-7,-24,22,22,-16,22,22,22,22,-58,22,22,-18,-59,-60,-61,-17,]),'$end':([1,2,3,4,5,6,7,8,9,10,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,79,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,126,136,142,143,144,147,148,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-10,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,-51,-12,-22,-23,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,-24,-16,-58,-18,-59,-60,-61,-17,]),'RBRACE':([3,4,5,6,7,8,9,10,23,26,27,36,39,40,41,42,43,44,45,46,51,52,54,79,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,111,112,113,118,126,129,135,136,137,139,142,143,144,145,146,147,148,],[-2,-4,-5,-6,-7,-8,-9,-10,-3,-29,-30,-52,-43,-44,-45,-46,-47,-48,-49,-50,-21,-28,-11,-51,-12,-22,-23,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,126,-62,-7,-24,-16,136,142,-58,143,144,-18,-59,-60,147,148,-61,-17,]),'ASSIGN':([11,31,32,65,],[24,63,64,91,]),'ADD':([11,],[26,]),'SUB':([11,],[27,]),'LPAREN':([11,15,16,24,25,29,30,34,37,38,44,47,53,63,64,67,68,69,70,71,72,73,74,75,76,77,78,91,110,],[28,38,38,38,38,-26,-27,66,38,38,28,38,28,38,38,96,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'PLUSEQUAL':([11,],[29,]),'MINUSEQUAL':([11,],[30,]),'NUMBER':([15,16,24,25,28,29,30,37,38,47,63,64,68,69,70,71,72,73,74,75,76,77,78,86,88,91,110,],[39,39,39,39,57,-26,-27,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,57,57,39,39,]),'STRING':([15,16,24,25,28,29,30,37,38,47,63,64,68,69,70,71,72,73,74,75,76,77,78,86,88,91,110,],[40,40,40,40,58,-26,-27,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,58,58,40,40,]),'FLOAT':([15,16,24,25,28,29,30,37,38,47,63,64,68,69,70,71,72,73,74,75,76,77,78,86,88,91,110,],[41,41,41,41,59,-26,-27,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,59,59,41,41,]),'BOOL':([15,16,24,25,28,29,30,37,38,47,63,64,68,69,70,71,72,73,74,75,76,77,78,86,88,91,110,],[42,42,42,42,62,-26,-27,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,62,62,42,42,]),'MINUS':([15,16,24,25,29,30,36,37,38,39,40,41,42,43,44,45,46,47,48,51,52,54,63,64,68,69,70,71,72,73,74,75,76,77,78,79,80,82,87,89,90,91,97,98,99,100,101,102,103,104,105,106,107,108,109,110,118,],[37,37,37,37,-26,-27,69,37,37,-43,-44,-45,-46,-47,-48,-49,-50,37,69,69,69,-11,37,37,37,37,37,37,37,37,37,37,37,37,37,-51,69,69,-12,69,69,37,-31,-32,-33,-34,69,69,69,69,69,69,69,-42,-13,37,69,]),'LBRACKET':([15,16,24,25,29,30,37,38,47,63,64,68,69,70,71,72,73,74,75,76,77,78,91,110,],[47,47,47,47,-26,-27,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'RPAREN':([28,39,40,41,42,43,44,45,46,53,54,55,56,57,58,59,60,61,62,66,79,80,87,92,94,96,97,98,99,100,101,102,103,104,105,106,107,108,109,116,117,122,124,128,138,],[54,-43,-44,-45,-46,-47,-48,-49,-50,-67,-11,87,-73,-64,-65,-66,-68,-69,-70,93,-51,108,-12,-75,121,123,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,-72,-74,-77,133,-76,-78,]),'PLUS':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[68,-43,-44,-45,-46,-47,-48,-49,-50,68,68,68,-11,-51,68,68,-12,68,68,-31,-32,-33,-34,68,68,68,68,68,68,68,-42,-13,68,]),'MULT':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[70,-43,-44,-45,-46,-47,-48,-49,-50,70,70,70,-11,-51,70,70,-12,70,70,70,70,-33,-34,70,70,70,70,70,70,70,-42,-13,70,]),'DIV':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[71,-43,-44,-45,-46,-47,-48,-49,-50,71,71,71,-11,-51,71,71,-12,71,71,71,71,-33,-34,71,71,71,71,71,71,71,-42,-13,71,]),'EXP':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[72,-43,-44,-45,-46,-47,-48,-49,-50,72,72,72,-11,-51,72,72,-12,72,72,-31,-32,-33,-34,72,72,72,72,72,72,72,-42,-13,72,]),'EQUALS':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[73,-43,-44,-45,-46,-47,-48,-49,-50,73,73,73,-11,-51,73,73,-12,73,73,-31,-32,-33,-34,73,73,73,73,73,73,73,-42,-13,73,]),'GREATER':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[74,-43,-44,-45,-46,-47,-48,-49,-50,74,74,74,-11,-51,74,74,-12,74,74,-31,-32,-33,-34,74,74,74,74,74,74,74,-42,-13,74,]),'LESS':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[75,-43,-44,-45,-46,-47,-48,-49,-50,75,75,75,-11,-51,75,75,-12,75,75,-31,-32,-33,-34,75,75,75,75,75,75,75,-42,-13,75,]),'GEQUAL':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[76,-43,-44,-45,-46,-47,-48,-49,-50,76,76,76,-11,-51,76,76,-12,76,76,-31,-32,-33,-34,76,76,76,76,76,76,76,-42,-13,76,]),'LEQUAL':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[77,-43,-44,-45,-46,-47,-48,-49,-50,77,77,77,-11,-51,77,77,-12,77,77,-31,-32,-33,-34,77,77,77,77,77,77,77,-42,-13,77,]),'NEQUAL':([36,39,40,41,42,43,44,45,46,48,51,52,54,79,80,82,87,89,90,97,98,99,100,101,102,103,104,105,106,107,108,109,118,],[78,-43,-44,-45,-46,-47,-48,-49,-50,78,78,78,-11,-51,78,78,-12,78,78,-31,-32,-33,-34,78,78,78,78,78,78,78,-42,-13,78,]),'LBRACE':([39,40,41,42,43,44,45,46,48,54,79,87,93,97,98,99,100,101,102,103,104,105,106,107,108,109,114,121,123,133,134,],[-43,-44,-45,-46,-47,-48,-49,-50,83,-11,-51,-12,120,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,127,130,132,140,141,]),'COMMA':([39,40,41,42,43,44,45,46,50,53,54,56,57,58,59,60,61,62,79,82,87,92,97,98,99,100,101,102,103,104,105,106,107,108,109,122,],[-43,-44,-45,-46,-47,-48,-49,-50,85,86,-11,88,-64,-65,-66,-68,-69,-70,-51,110,-12,119,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,131,]),'RBRACKET':([39,40,41,42,43,44,45,46,54,79,81,82,87,97,98,99,100,101,102,103,104,105,106,107,108,109,125,],[-43,-44,-45,-46,-47,-48,-49,-50,-11,-51,109,-14,-12,-31,-32,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-13,-15,]),'IN':([49,50,115,],[84,-19,-20,]),'ELSE':([126,],[134,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,83,120,127,130,132,140,141,],[2,112,112,112,112,112,112,112,]),'statement':([0,2,83,112,120,127,130,132,140,141,],[3,23,3,23,3,3,3,3,3,3,]),'assignment':([0,2,83,112,120,127,130,132,140,141,],[4,4,4,4,4,4,4,4,4,4,]),'assignment_update':([0,2,83,112,120,127,130,132,140,141,],[5,5,5,5,5,5,5,5,5,5,]),'function_declaration':([0,2,83,112,120,127,130,132,140,141,],[6,6,6,6,6,6,6,6,6,6,]),'return_statement':([0,2,83,112,120,127,130,132,140,141,],[7,7,113,7,113,113,113,113,113,113,]),'function_call':([0,2,15,16,24,25,28,37,38,47,63,64,68,69,70,71,72,73,74,75,76,77,78,83,86,88,91,110,112,120,127,130,132,140,141,],[8,8,45,45,45,45,60,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,8,60,60,45,45,8,8,8,8,8,8,8,]),'if_statement':([0,2,83,112,120,127,130,132,140,141,],[9,9,9,9,9,9,9,9,9,9,]),'for_in_statement':([0,2,83,112,120,127,130,132,140,141,],[10,10,10,10,10,10,10,10,10,10,]),'type_attr':([0,2,13,14,66,83,96,112,119,120,127,130,131,132,140,141,],[12,12,33,35,95,12,95,12,95,12,12,12,95,12,12,12,]),'assignment_type':([11,],[25,]),'expression':([15,16,24,25,37,38,47,63,64,68,69,70,71,72,73,74,75,76,77,78,91,110,],[36,48,51,52,79,80,82,89,90,97,98,99,100,101,102,103,104,105,106,107,118,82,]),'array_declaration':([15,16,24,25,37,38,47,63,64,68,69,70,71,72,73,74,75,76,77,78,91,110,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'id_list':([17,85,],[49,115,]),'parameters':([28,86,88,],[55,116,117,]),'value':([28,86,88,],[56,56,56,]),'array_elements':([47,110,],[81,125,]),'func_parameters':([66,96,119,131,],[94,124,128,138,]),'statement_body':([83,120,127,130,132,140,141,],[111,129,135,137,139,145,146,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','TallyParser.py',15),
  ('statement_list -> statement','statement_list',1,'p_statement_list','TallyParser.py',21),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','TallyParser.py',22),
  ('statement -> assignment','statement',1,'p_statement','TallyParser.py',31),
  ('statement -> assignment_update','statement',1,'p_statement','TallyParser.py',32),
  ('statement -> function_declaration','statement',1,'p_statement','TallyParser.py',33),
  ('statement -> return_statement','statement',1,'p_statement','TallyParser.py',34),
  ('statement -> function_call','statement',1,'p_statement','TallyParser.py',35),
  ('statement -> if_statement','statement',1,'p_statement','TallyParser.py',36),
  ('statement -> for_in_statement','statement',1,'p_statement','TallyParser.py',37),
  ('function_call -> ID LPAREN RPAREN','function_call',3,'p_function_call','TallyParser.py',43),
  ('function_call -> ID LPAREN parameters RPAREN','function_call',4,'p_function_call','TallyParser.py',44),
  ('array_declaration -> LBRACKET array_elements RBRACKET','array_declaration',3,'p_array_declaration','TallyParser.py',53),
  ('array_elements -> expression','array_elements',1,'p_array_elements','TallyParser.py',59),
  ('array_elements -> expression COMMA array_elements','array_elements',3,'p_array_elements','TallyParser.py',60),
  ('if_statement -> IF expression LBRACE statement_body RBRACE','if_statement',5,'p_if_statement','TallyParser.py',69),
  ('if_statement -> IF expression LBRACE statement_body RBRACE ELSE LBRACE statement_body RBRACE','if_statement',9,'p_if_statement','TallyParser.py',70),
  ('for_in_statement -> FOR id_list IN ID LBRACE statement_body RBRACE','for_in_statement',7,'p_for_in_statement','TallyParser.py',79),
  ('id_list -> ID','id_list',1,'p_id_list','TallyParser.py',85),
  ('id_list -> ID COMMA id_list','id_list',3,'p_id_list','TallyParser.py',86),
  ('assignment -> ID ASSIGN expression','assignment',3,'p_assignment','TallyParser.py',95),
  ('assignment -> type_attr ID ASSIGN expression','assignment',4,'p_assignment','TallyParser.py',96),
  ('assignment -> CONST ID ASSIGN expression','assignment',4,'p_assignment','TallyParser.py',97),
  ('assignment -> CONST type_attr ID ASSIGN expression','assignment',5,'p_assignment','TallyParser.py',98),
  ('assignment_type -> ASSIGN','assignment_type',1,'p_assignment_type','TallyParser.py',120),
  ('assignment_type -> PLUSEQUAL','assignment_type',1,'p_assignment_type','TallyParser.py',121),
  ('assignment_type -> MINUSEQUAL','assignment_type',1,'p_assignment_type','TallyParser.py',122),
  ('assignment_update -> ID assignment_type expression','assignment_update',3,'p_assignment_update','TallyParser.py',128),
  ('assignment_update -> ID ADD','assignment_update',2,'p_assignment_update','TallyParser.py',129),
  ('assignment_update -> ID SUB','assignment_update',2,'p_assignment_update','TallyParser.py',130),
  ('expression -> expression PLUS expression','expression',3,'p_expression','TallyParser.py',139),
  ('expression -> expression MINUS expression','expression',3,'p_expression','TallyParser.py',140),
  ('expression -> expression MULT expression','expression',3,'p_expression','TallyParser.py',141),
  ('expression -> expression DIV expression','expression',3,'p_expression','TallyParser.py',142),
  ('expression -> expression EXP expression','expression',3,'p_expression','TallyParser.py',143),
  ('expression -> expression EQUALS expression','expression',3,'p_expression','TallyParser.py',144),
  ('expression -> expression GREATER expression','expression',3,'p_expression','TallyParser.py',145),
  ('expression -> expression LESS expression','expression',3,'p_expression','TallyParser.py',146),
  ('expression -> expression GEQUAL expression','expression',3,'p_expression','TallyParser.py',147),
  ('expression -> expression LEQUAL expression','expression',3,'p_expression','TallyParser.py',148),
  ('expression -> expression NEQUAL expression','expression',3,'p_expression','TallyParser.py',149),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression','TallyParser.py',150),
  ('expression -> NUMBER','expression',1,'p_expression','TallyParser.py',151),
  ('expression -> STRING','expression',1,'p_expression','TallyParser.py',152),
  ('expression -> FLOAT','expression',1,'p_expression','TallyParser.py',153),
  ('expression -> BOOL','expression',1,'p_expression','TallyParser.py',154),
  ('expression -> NULL','expression',1,'p_expression','TallyParser.py',155),
  ('expression -> ID','expression',1,'p_expression','TallyParser.py',156),
  ('expression -> function_call','expression',1,'p_expression','TallyParser.py',157),
  ('expression -> array_declaration','expression',1,'p_expression','TallyParser.py',158),
  ('expression -> MINUS expression','expression',2,'p_expression_uminus','TallyParser.py',166),
  ('return_statement -> RETURN expression','return_statement',2,'p_return_statement','TallyParser.py',171),
  ('type_attr -> INTattr','type_attr',1,'p_type_attr','TallyParser.py',177),
  ('type_attr -> FLOATattr','type_attr',1,'p_type_attr','TallyParser.py',178),
  ('type_attr -> STRINGattr','type_attr',1,'p_type_attr','TallyParser.py',179),
  ('type_attr -> BOOLattr','type_attr',1,'p_type_attr','TallyParser.py',180),
  ('type_attr -> NULL','type_attr',1,'p_type_attr','TallyParser.py',181),
  ('function_declaration -> DEF ID LPAREN RPAREN LBRACE statement_body RBRACE','function_declaration',7,'p_function_declaration','TallyParser.py',187),
  ('function_declaration -> DEF ID LPAREN func_parameters RPAREN LBRACE statement_body RBRACE','function_declaration',8,'p_function_declaration','TallyParser.py',188),
  ('function_declaration -> DEF type_attr ID LPAREN RPAREN LBRACE statement_body RBRACE','function_declaration',8,'p_function_declaration','TallyParser.py',189),
  ('function_declaration -> DEF type_attr ID LPAREN func_parameters RPAREN LBRACE statement_body RBRACE','function_declaration',9,'p_function_declaration','TallyParser.py',190),
  ('statement_body -> statement_list','statement_body',1,'p_statement_body','TallyParser.py',204),
  ('statement_body -> return_statement','statement_body',1,'p_statement_body','TallyParser.py',205),
  ('value -> NUMBER','value',1,'p_value','TallyParser.py',214),
  ('value -> STRING','value',1,'p_value','TallyParser.py',215),
  ('value -> FLOAT','value',1,'p_value','TallyParser.py',216),
  ('value -> ID','value',1,'p_value','TallyParser.py',217),
  ('value -> function_call','value',1,'p_value','TallyParser.py',218),
  ('value -> NULL','value',1,'p_value','TallyParser.py',219),
  ('value -> BOOL','value',1,'p_value','TallyParser.py',220),
  ('parameters -> ID','parameters',1,'p_parameters','TallyParser.py',226),
  ('parameters -> ID COMMA parameters','parameters',3,'p_parameters','TallyParser.py',227),
  ('parameters -> value','parameters',1,'p_parameters','TallyParser.py',228),
  ('parameters -> value COMMA parameters','parameters',3,'p_parameters','TallyParser.py',229),
  ('func_parameters -> ID','func_parameters',1,'p_func_parameters','TallyParser.py',238),
  ('func_parameters -> ID COMMA func_parameters','func_parameters',3,'p_func_parameters','TallyParser.py',239),
  ('func_parameters -> type_attr ID','func_parameters',2,'p_func_parameters','TallyParser.py',240),
  ('func_parameters -> type_attr ID COMMA func_parameters','func_parameters',4,'p_func_parameters','TallyParser.py',241),
]
